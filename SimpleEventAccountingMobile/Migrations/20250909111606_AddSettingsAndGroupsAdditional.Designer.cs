// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleEventAccountingMobile.Database.DbContexts;

#nullable disable

namespace SimpleEventAccountingMobile.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20250909111606_AddSettingsAndGroupsAdditional")]
    partial class AddSettingsAndGroupsAdditional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.CashWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cash")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CashWallets");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.CashWalletHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cash")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EventId");

                    b.ToTable("CashWalletHistory");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.ClientGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClientGroups");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.ClientGroupBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientGroupId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientGroupBindings");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActionEvents");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.EventChangeSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cash")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EventId");

                    b.ToTable("EventChangeSets");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.EventClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EventId");

                    b.ToTable("EventClients");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.TrainingChangeSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Count")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Free")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Skip")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Subscription")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingChangeSets");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.TrainingClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingClients");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.TrainingWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Count")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Free")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Skip")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Subscription")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Subscription");

                    b.ToTable("TrainingWallets");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.TrainingWalletHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Count")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Free")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Skip")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Subscription")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingWalletHistory");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.CashWallet", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("CashWallets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.CashWalletHistory", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("CashWalletHistory")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Event", "Event")
                        .WithMany("CashWalletHistory")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Client");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.ClientGroupBinding", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.ClientGroup", "ClientGroup")
                        .WithMany("ClientGroupBindings")
                        .HasForeignKey("ClientGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("ClientGroupBindings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientGroup");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.EventChangeSet", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("EventChangeSets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Event", "Event")
                        .WithMany("EventChangeSets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.EventClient", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("EventClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Event", "Event")
                        .WithMany("EventClients")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.TrainingChangeSet", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("TrainingChangeSets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Training", "Training")
                        .WithMany("TrainingChangeSets")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.TrainingClient", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("TrainingClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Training", "Training")
                        .WithMany("TrainingClients")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.TrainingWallet", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("TrainingWallets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.TrainingWalletHistory", b =>
                {
                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Client", "Client")
                        .WithMany("TrainingWalletHistory")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SimpleEventAccountingMobile.Database.DbModels.Training", "Training")
                        .WithMany("TrainingWalletHistory")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Client");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.Client", b =>
                {
                    b.Navigation("CashWalletHistory");

                    b.Navigation("CashWallets");

                    b.Navigation("ClientGroupBindings");

                    b.Navigation("EventChangeSets");

                    b.Navigation("EventClients");

                    b.Navigation("TrainingChangeSets");

                    b.Navigation("TrainingClients");

                    b.Navigation("TrainingWalletHistory");

                    b.Navigation("TrainingWallets");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.ClientGroup", b =>
                {
                    b.Navigation("ClientGroupBindings");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.Event", b =>
                {
                    b.Navigation("CashWalletHistory");

                    b.Navigation("EventChangeSets");

                    b.Navigation("EventClients");
                });

            modelBuilder.Entity("SimpleEventAccountingMobile.Database.DbModels.Training", b =>
                {
                    b.Navigation("TrainingChangeSets");

                    b.Navigation("TrainingClients");

                    b.Navigation("TrainingWalletHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
