@page "/events"
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Services.Interfaces
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IErrorService ErrorService

<PageTitle>События</PageTitle>

<div class="page-header">
    <h1 class="page-title">События</h1>
</div>

<hr />

@if (isLoading)
{
    <p><em>Загрузка событий...</em></p>
}
else if (events == null || !events.Any())
{
    <p>Нет прошедших событий.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Название</th>
                <th>Дата</th>
                <th>Сто</th>
                <th>*</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in events)
            {
                <tr>
                    <td>@ev.Name</td>
                    <td>@ev.Date.ToString("dd.MM")</td>
                    <td>@ev.Price.ToString("#")₽</td>
                    <td>
                        <button class="btn btn-sm btn-primary button-icon" @onclick="() => ViewEvent(ev.Id)">
                            <span class="bi bi-postcard" aria-hidden="true"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="action-buttons">
    <button type="button" class="back-button" @onclick="GoHome">
        <span class="back-icon">←</span>
        Назад
    </button>
    <button type="button" class="create-button" @onclick="CreateNewEvent">
        <span class="create-icon">+</span>
        Новое событие
    </button>
</div>

@code {
    private List<Event>? events;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            events = await EventService.GetPastEventsAsync();
        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex, "Ошибка загрузки событий");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void CreateNewEvent()
    {
        NavigationManager.NavigateTo("/create-event");
    }

    private void ViewEvent(Guid eventId)
    {
        NavigationManager.NavigateTo($"/view-event/{eventId}");
    }
}