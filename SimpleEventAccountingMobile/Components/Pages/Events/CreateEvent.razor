@page "/create-event"
@using System.Globalization
@using SimpleEventAccountingMobile.Services.Interfaces
@using SimpleEventAccountingMobile.Components.Shared
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Dtos
@inject IEventCreationStateManager StateManager
@inject IEventCreationHandler EventHandler
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Создать событие</PageTitle>

<div class="create-event-page">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p class="loading-text">Загрузка данных...</p>
        </div>
    }
    else
    {
        <div class="page-header">
            <h1 class="page-title">Создать новое событие</h1>
        </div>

        <EditForm Model="newEventModel">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-container">
                    <div class="error-icon">⚠️</div>
                    <h3 class="error-title">Ошибка</h3>
                    <p class="error-message">@errorMessage</p>
                </div>
            }

            <div class="form-card">
                <h2 class="section-title">Основная информация</h2>

                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Название события</label>
                        <InputText @bind-Value="newEventModel.Name" class="form-control" />
                        <ValidationMessage For="@(() => newEventModel.Name)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Описание события</label>
                        <InputTextArea @bind-Value="newEventModel.Description" class="form-control" />
                        <ValidationMessage For="@(() => newEventModel.Description)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Дата события</label>
                        <InputDate @bind-Value="newEventModel.Date" class="form-control" />
                        <ValidationMessage For="@(() => newEventModel.Date)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Стоимость события</label>
                        <InputNumber @bind-Value="newEventModel.Price" class="form-control" />
                        <ValidationMessage For="@(() => newEventModel.Price)" />
                    </div>
                </div>
            </div>

            <div class="participants-card">
                <h2 class="section-title">
                    Участники события
                    @if (StateManager.SelectedClients.Any())
                    {
                        <span class="participants-count">(@StateManager.SelectedClients.Count)</span>
                    }
                </h2>

                @if (StateManager.SelectedClients.Any())
                {
                    <div class="participants-grid">
                        @foreach (var client in StateManager.SelectedClients)
                        {
                            <div class="participant-card">
                                <div class="participant-info">
                                    <div class="participant-name">@client.Name</div>
                                </div>
                                <button type="button" class="remove-button" @onclick="() => RemoveClient(client)">
                                    <span class="remove-icon">×</span>
                                </button>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">👥</div>
                        <p>Нет добавленных клиентов</p>
                    </div>
                }

                <button type="button" class="add-client-button" @onclick="ShowAddClientModal">
                    <span class="add-icon">+</span>
                    Добавить клиента
                </button>
            </div>

            <div class="action-buttons">
                <button type="button" class="back-button" @onclick="GoBack">
                    <span class="back-icon">←</span>
                    Назад
                </button>
                <button type="submit" class="create-button" @onclick="HandleValidSubmit">
                    <span class="create-icon">✓</span>
                    Создать событие
                </button>
            </div>
        </EditForm>

        <AddClientPopup IsVisible="@StateManager.IsAddClientModalVisible"
                        IsVisibleChanged="OnAddClientModalChanged"
                        AvailableClients="StateManager.AvailableClientsForAddition"
                        OnClientSelected="AddClientToSelectedClients" />
    }
</div>

@code {
    private NewEventModel newEventModel = new();
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await StateManager.LoadClientsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке клиентов: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddClientModal()
    {
        StateManager.ShowAddClientModal();
    }

    private void OnAddClientModalChanged(bool visible)
    {
        if (!visible)
        {
            StateManager.HideAddClientModal();
        }
    }

    private async Task AddClientToSelectedClients(Client client)
    {
        StateManager.AddClient(client);
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveClient(Client client)
    {
        StateManager.RemoveClient(client);
    }

    private async Task HandleValidSubmit()
    {
        var clientIds = StateManager.GetSelectedClientIds();
        var result = await EventHandler.CreateEventAsync(newEventModel, clientIds);

        if (result.Success)
        {
            NavigationManager.NavigateTo("/events");
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/events");
    }
}
