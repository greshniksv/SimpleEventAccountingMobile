@page "/create-event"
@using System.Globalization
@using SimpleEventAccountingMobile.Services.Interfaces
@using SimpleEventAccountingMobile.Components.Shared
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Dtos
@inject IEventCreationStateManager StateManager
@inject IEventCreationHandler EventHandler
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Создать событие</PageTitle>
<h3>Создать событие</h3>

<hr />

<EditForm Model="newEventModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    <div class="mb-3">
        <label class="form-label">Название события</label>
        <InputText @bind-Value="newEventModel.Name" class="form-control" />
        <ValidationMessage For="@(() => newEventModel.Name)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Описание события</label>
        <InputTextArea @bind-Value="newEventModel.Description" class="form-control" />
        <ValidationMessage For="@(() => newEventModel.Description)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Дата события</label>
        <InputDate @bind-Value="newEventModel.Date" class="form-control" />
        <ValidationMessage For="@(() => newEventModel.Date)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Стоимость события (Price)</label>
        <InputNumber @bind-Value="newEventModel.Price" class="form-control" />
        <ValidationMessage For="@(() => newEventModel.Price)" />
    </div>

    <div class="mb-3">
        <h5>Участники события</h5>
        @if (StateManager.SelectedClients.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Имя</th>
                        <th>Дата рождения</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var client in StateManager.SelectedClients)
                    {
                        <tr>
                            <td>@client.Name</td>
                            <td>@client.Birthday.ToString("dd.MM.yyyy")</td>
                            <td>
                                <button class="btn btn-danger btn-sm button-icon" @onclick="() => RemoveClient(client)">
                                    <span class="bi bi-minus-square" aria-hidden="true"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Нет добавленных клиентов.</p>
        }

        <button type="button" class="btn btn-secondary" @onclick="ShowAddClientModal">Добавить Клиента</button>
    </div>

    <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">Создать событие</button>
</EditForm>

<AddClientPopup IsVisible="@StateManager.IsAddClientModalVisible"
               IsVisibleChanged="OnAddClientModalChanged"
               AvailableClients="StateManager.AvailableClientsForAddition"
               OnClientSelected="AddClientToSelectedClients" />

@code {
    private NewEventModel newEventModel = new();
    private string? errorMessage;
    private bool isLoading = true;
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await StateManager.LoadClientsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке клиентов: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddClientModal()
    {
        StateManager.ShowAddClientModal();
    }

    private void OnAddClientModalChanged(bool visible)
    {
        if (!visible)
        {
            StateManager.HideAddClientModal();
        }
    }

    private async Task AddClientToSelectedClients(Client client)
    {
        StateManager.AddClient(client);
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveClient(Client client)
    {
        StateManager.RemoveClient(client);
    }

    private async Task HandleValidSubmit()
    {
        var clientIds = StateManager.GetSelectedClientIds();
        var result = await EventHandler.CreateEventAsync(newEventModel, clientIds);

        if (result.Success)
        {
            NavigationManager.NavigateTo("/events");
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }
}