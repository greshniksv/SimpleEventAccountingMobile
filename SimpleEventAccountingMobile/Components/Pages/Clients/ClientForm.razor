@page "/clients/add"
@page "/clients/edit/{ClientId:guid}"
@page "/clients/edit/{ClientId:guid}/{CameFrom}"
@using Microsoft.EntityFrameworkCore
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Database.Interfaces
@using SimpleEventAccountingMobile.Services.Interfaces

@inject IErrorService ErrorService
@inject IMainContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>@Title</PageTitle>

<div class="client-page">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p class="loading-text">Загрузка данных...</p>
        </div>
    }
    else
    {
        <div class="page-header">
            <h1 class="page-title">@Title</h1>
        </div>

        <EditForm Model="@clientModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-container">
                    <div class="error-icon">⚠️</div>
                    <h3 class="error-title">Ошибка</h3>
                    <p class="error-message">@errorMessage</p>
                </div>
            }

            <div class="form-card">
                <h2 class="section-title">Информация о клиенте</h2>

                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Имя:</label>
                        <InputText id="name" class="form-control" @bind-Value="clientModel.Name" />
                        <ValidationMessage For="@(() => clientModel.Name)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Дата рождения:</label>
                        <InputDate id="birthday" class="form-control" @bind-Value="clientModel.Birthday" />
                        <ValidationMessage For="@(() => clientModel.Birthday)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Комментарий:</label>
                        <InputTextArea id="comment" class="form-control" @bind-Value="clientModel.Comment" />
                        <ValidationMessage For="@(() => clientModel.Comment)" />
                    </div>
                </div>
            </div>

            <div class="form-card">
                <h2 class="section-title">Кошелек</h2>

                <div class="form-grid">
                    <div class="form-group checkbox-group">
                        <label class="form-label">Есть ли подписка:</label>
                        <InputCheckbox id="subscription" @bind-Value="trainingWallet.Subscription" class="form-checkbox" />
                        <ValidationMessage For="@(() => trainingWallet.Subscription)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Доступно кол-во занятий:</label>
                        <InputNumber id="sub_count" class="form-control" @bind-Value="Count" />
                        <ValidationMessage For="@(() => Count)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Доступно пропусков:</label>
                        <InputNumber id="sub_skip" class="form-control" @bind-Value="Skip" />
                        <ValidationMessage For="@(() => Skip)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Доступно бесплатных:</label>
                        <InputNumber id="sub_free" class="form-control" @bind-Value="Free" />
                        <ValidationMessage For="@(() => Free)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Наличка:</label>
                        <InputNumber id="cash" class="form-control" @bind-Value="Cash" />
                        <ValidationMessage For="@(() => Cash)" />
                    </div>
                </div>
            </div>

            <div class="action-buttons">
                <button type="button" class="back-button" @onclick="Cancel">
                    <span class="back-icon">←</span>
                    Отмена
                </button>
                <button type="submit" class="save-button">
                    <span class="save-icon">✓</span>
                    Сохранить
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public Guid ClientId { get; set; }

    [Parameter]
    public string? CameFrom { get; set; }

    public int Cash
    {
        get { return Convert.ToInt32(cashWallet.Cash); }
        set { cashWallet.Cash = value; }
    }

    public int Free
    {
        get { return Convert.ToInt32(trainingWallet.Free); }
        set { trainingWallet.Free = value; }
    }

    public int Skip
    {
        get { return Convert.ToInt32(trainingWallet.Skip); }
        set { trainingWallet.Skip = value; }
    }

    public int Count
    {
        get { return Convert.ToInt32(trainingWallet.Count); }
        set { trainingWallet.Count = value; }
    }

    private Client? clientModel;
    private string Title = string.Empty;
    private bool IsNewClient => ClientId == Guid.Empty;
    private CashWallet? cashWallet;
    private TrainingWallet? trainingWallet;
    private CashWallet? cashWalletOld;
    private TrainingWallet? trainingWalletOld;
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (IsNewClient)
            {
                Title = "Добавить нового клиента";
                clientModel = new Client
                {
                    Birthday = DateTime.Today
                };

                cashWallet = new CashWallet();
                trainingWallet = new TrainingWallet();

                clientModel.CashWallets ??= new List<CashWallet>();
                clientModel.CashWallets.Add(cashWallet);

                clientModel.TrainingWallets ??= new List<TrainingWallet>();
                clientModel.TrainingWallets.Add(trainingWallet);
            }
            else
            {
                Title = "Редактировать клиента";
                clientModel = await DbContext.Clients
                    .AsNoTracking()
                    .Include(x => x.TrainingWallets)
                    .Include(x => x.CashWallets)
                    .FirstOrDefaultAsync(x => x.Id == ClientId);

                if (clientModel == null)
                {
                    errorMessage = "Клиент не найден";
                    return;
                }

                cashWallet = clientModel.CashWallets.FirstOrDefault();
                trainingWallet = clientModel.TrainingWallets.FirstOrDefault();

                if (cashWallet == null)
                {
                    cashWallet = new CashWallet();
                    clientModel.CashWallets ??= new List<CashWallet>();
                    clientModel.CashWallets.Add(cashWallet);
                }

                if (trainingWallet == null)
                {
                    trainingWallet = new TrainingWallet();
                    clientModel.TrainingWallets ??= new List<TrainingWallet>();
                    clientModel.TrainingWallets.Add(trainingWallet);                
                }
            }

            cashWalletOld = (CashWallet)cashWallet.Clone();
            trainingWalletOld = (TrainingWallet)trainingWallet.Clone();
        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex, $"Ошибка при загрузке данных: {ex.Message}");
            errorMessage = $"Ошибка при загрузке данных: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (clientModel == null) return;

            if (!cashWalletOld.Equals(cashWallet))
            {
                clientModel.CashWalletHistory ??= new List<CashWalletHistory>();
                clientModel.CashWalletHistory.Add(GetCashHistory());
            }

            if (!trainingWalletOld.Equals(trainingWallet))
            {
                clientModel.TrainingWalletHistory ??= new List<TrainingWalletHistory>();
                clientModel.TrainingWalletHistory.Add(GetTrainingHistory());
            }

            if (IsNewClient)
            {
                await DbContext.Clients.AddAsync(clientModel);
            }
            else
            {
                DbContext.Clients.Update(clientModel);
            }

            await DbContext.SaveChangesAsync();
            NavigateToList();
        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex,  $"Ошибка при сохранении: {ex.Message}");
            errorMessage = $"Ошибка при сохранении: {ex.Message}";
        }
    }

    private TrainingWalletHistory GetTrainingHistory()
    {
        return new TrainingWalletHistory()
        {
            Skip = trainingWallet?.Skip ?? 0,
            Count = trainingWallet?.Count ?? 0,
            Subscription = trainingWallet.Subscription,
            Free = trainingWallet?.Free ?? 0,
            Comment = "Ручное изменение",
            Date = DateTime.Now,
            TrainingId = null
        };
    }

    private CashWalletHistory GetCashHistory()
    {
        return new CashWalletHistory()
        {
            Cash = cashWallet?.Cash ?? 0,
            Comment = "Ручное изменение",
            Date = DateTime.Now,
            EventId = null
        };
    }

    private void Cancel()
    {
        NavigateToList();
    }

    private void NavigateToList()
    {
        if (CameFrom == "deleted")
        {
            NavigationManager.NavigateTo("/clients/deleted");
        }
        else
        {
            NavigationManager.NavigateTo("/clients");
        }
    }
}