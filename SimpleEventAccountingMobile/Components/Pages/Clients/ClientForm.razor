@page "/clients/add"
@page "/clients/edit/{ClientId:guid}"
@page "/clients/edit/{ClientId:guid}/{CameFrom}"
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Dtos
@using SimpleEventAccountingMobile.Services.Interfaces

@inject IErrorService ErrorService
@inject IClientService ClientService
@inject NavigationManager NavigationManager

<PageTitle>@Title</PageTitle>

<div class="client-page">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p class="loading-text">Загрузка данных...</p>
        </div>
    }
    else
    {
        <div class="page-header">
            <h1 class="page-title">@Title</h1>
        </div>

        <EditForm Model="@clientDto" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-container">
                    <div class="error-icon">⚠️</div>
                    <h3 class="error-title">Ошибка</h3>
                    <p class="error-message">@errorMessage</p>
                </div>
            }

            <div class="form-card">
                <h2 class="section-title">Информация о клиенте</h2>

                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Имя:</label>
                        <InputText id="name" class="form-control" @bind-Value="clientDto.Name" />
                        <ValidationMessage For="@(() => clientDto.Name)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Дата рождения:</label>
                        <InputDate id="birthday" class="form-control" @bind-Value="clientDto.Birthday" />
                        <ValidationMessage For="@(() => clientDto.Birthday)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Комментарий:</label>
                        <InputTextArea id="comment" class="form-control" @bind-Value="clientDto.Comment" />
                        <ValidationMessage For="@(() => clientDto.Comment)" />
                    </div>
                </div>
            </div>

            <div class="form-card">
                <h2 class="section-title">Кошелек</h2>

                <div class="form-grid">
                    <div class="form-group checkbox-group">
                        <label class="form-label">Есть ли подписка:</label>
                        <InputCheckbox id="subscription" @bind-Value="clientDto.Subscription" class="form-checkbox" />
                        <ValidationMessage For="@(() => clientDto.Subscription)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Доступно кол-во занятий:</label>
                        <InputNumber id="sub_count" class="form-control" @bind-Value="clientDto.TrainingCount" />
                        <ValidationMessage For="@(() => clientDto.TrainingCount)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Доступно пропусков:</label>
                        <InputNumber id="sub_skip" class="form-control" @bind-Value="clientDto.TrainingSkip" />
                        <ValidationMessage For="@(() => clientDto.TrainingSkip)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Доступно бесплатных:</label>
                        <InputNumber id="sub_free" class="form-control" @bind-Value="clientDto.TrainingFree" />
                        <ValidationMessage For="@(() => clientDto.TrainingFree)" />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Наличка:</label>
                        <InputNumber id="cash" class="form-control" @bind-Value="clientDto.CashAmount" />
                        <ValidationMessage For="@(() => clientDto.CashAmount)" />
                    </div>
                </div>
            </div>

            <div class="form-card">
                <h2 class="section-title"> Группы </h2>
                @if (groupInfoDtos != null && groupInfoDtos.Any())
                {
                    <ul class="group-list">
                        @foreach (var group in groupInfoDtos)
                        {
                            <li class="group-item">
                                <div class="group-header">
                                    <h3 class="group-name">@group.Name</h3>
                                </div>
                                <p class="group-description">@group.Description</p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>Нет доступных групп.</p>
                }
            </div>

            <div class="action-buttons">
                <button type="button" class="back-button" @onclick="Cancel">
                    <span class="back-icon">←</span>
                    Отмена
                </button>
                <button type="submit" class="save-button">
                    <span class="save-icon">✓</span>
                    Сохранить
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public Guid ClientId { get; set; }

    [Parameter]
    public string? CameFrom { get; set; }

    private FullClientDto clientDto = new();
    private List<ClientGroupInfoDto> groupInfoDtos;
    private string Title = string.Empty;
    private bool IsNewClient => ClientId == Guid.Empty;
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (IsNewClient)
            {
                Title = "Добавить нового клиента";
                clientDto = new FullClientDto
                {
                    Birthday = DateTime.Today
                };
            }
            else
            {
                Title = "Редактировать клиента";
                var client = await ClientService.GetClientByIdAsync(ClientId);
                groupInfoDtos = await ClientService.GetGroups(ClientId);

                if (client == null)
                {
                    errorMessage = "Клиент не найден";
                    return;
                }

                clientDto = client;
            }

        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex, $"Ошибка при загрузке данных: {ex.Message}");
            errorMessage = $"Ошибка при загрузке данных: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (IsNewClient)
            {
                await ClientService.CreateClientAsync(clientDto);
            }
            else
            {
                await ClientService.UpdateClientAsync(clientDto);
            }

            NavigateToList();
        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex, $"Ошибка при сохранении: {ex.Message}");
            errorMessage = $"Ошибка при сохранении: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigateToList();
    }

    private void NavigateToList()
    {
        if (CameFrom == "deleted")
        {
            NavigationManager.NavigateTo("/clients/deleted");
        }
        else
        {
            NavigationManager.NavigateTo("/clients");
        }
    }
}