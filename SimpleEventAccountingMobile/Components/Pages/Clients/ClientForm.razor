@page "/clients/add"
@page "/clients/edit/{ClientId:guid}"
@using Microsoft.EntityFrameworkCore
@using SimpleEventAccountingMobile.Converters
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Database.Interfaces

@inject IMainContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>@Title</PageTitle>

<h3>@Title</h3>

<style>
    .block
    {
        padding: 25px;
    }

</style>

@if (clientModel == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <EditForm Model="@clientModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <h4 class="p-3"> Информация </h4>
        <div class="form-control block">
        
            <div class="mb-3">
                <label for="name" class="form-label">Имя:</label>
                <InputText id="name" class="form-control" @bind-Value="clientModel.Name" />
                <ValidationMessage For="@(() => clientModel.Name)" />
            </div>

            <div class="mb-3">
                <label for="birthday" class="form-label">Дата рождения:</label>
                <InputDate id="birthday" class="form-control" @bind-Value="clientModel.Birthday" />
                <ValidationMessage For="@(() => clientModel.Birthday)" />
            </div>

            <div class="mb-3">
                <label for="comment" class="form-label">Комментарий:</label>
                <InputTextArea id="comment" class="form-control" @bind-Value="clientModel.Comment" />
                <ValidationMessage For="@(() => clientModel.Comment)" />
            </div>

        </div>
        
        <h4 class="p-3"> Кошелек </h4>
        <div class="form-control block">
        
            <div class="mb-3">
                <label for="subscription" class="form-label">Есть ли подписка:</label>
                <InputCheckbox id="subscription" @bind-Value="trainingWallet.Subscription"></InputCheckbox>
                <ValidationMessage For="@(() => trainingWallet.Subscription)" />
            </div>
        
            <div class="mb-3">
                <label for="sub_count" class="form-label">Доступно кол-во занятий:</label>
                <InputNumber id="sub_count" class="form-control" @bind-Value="trainingWallet.Count" ValueConverter="converter" />
                <ValidationMessage For="@(() => trainingWallet.Count)" />
            </div>
        
            <div class="mb-3">
                <label for="sub_skip" class="form-label">Доступно пропусков:</label>
                <InputNumber id="sub_skip" class="form-control" @bind-Value="trainingWallet.Skip" ValueConverter="converter" />
                <ValidationMessage For="@(() => trainingWallet.Skip)" />
            </div>
        
            <div class="mb-3">
                <label for="sub_free" class="form-label">Доступно бесплатных:</label>
                <InputNumber id="sub_free" class="form-control" @bind-Value="trainingWallet.Free" ValueConverter="converter" />
                <ValidationMessage For="@(() => trainingWallet.Skip)" />
            </div>

            <div class="mb-3">
                <label for="cash" class="form-label">Наличка:</label>
                <InputNumber id="cash" class="form-control" @bind-Value="cashWallet.Cash" ValueConverter="converter" />
                <ValidationMessage For="@(() => cashWallet.Cash)" />
            </div>

        </div>
        

        <hr />

        <button type="submit" class="btn btn-success">Сохранить</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Отмена</button>

    </EditForm>
}


@code {
    [Parameter]
    public Guid ClientId { get; set; }

    private Client? clientModel;
    private string Title = string.Empty;
    private bool IsNewClient => ClientId == Guid.Empty;
    private CashWallet? cashWallet;
    private TrainingWallet? trainingWallet;
    private CashWallet? cashWalletOld;
    private TrainingWallet? trainingWalletOld;

    private DecimalToLongConverter converter = new();

    protected override async Task OnParametersSetAsync()
    {
        if (IsNewClient)
        {
            Title = "Добавить нового клиента";
            clientModel = new Client
            {
                // Задаем значения по умолчанию
                Birthday = DateTime.Today
            };

            cashWallet = new CashWallet();
            trainingWallet = new TrainingWallet();

            clientModel.CashWallets ??= new List<CashWallet>();
            clientModel.CashWallets.Add(cashWallet);

            clientModel.TrainingWallets ??= new List<TrainingWallet>();
            clientModel.TrainingWallets.Add(trainingWallet);
        }
        else
        {
            Title = "Редактировать клиента";
            // Загружаем существующего клиента из БД
            clientModel = await DbContext.Clients
                .Include(x => x.TrainingWallets)
                .Include(x => x.CashWallets)
                .FirstOrDefaultAsync(x => x.Id == ClientId);

            cashWallet = clientModel.CashWallets.FirstOrDefault();
            trainingWallet = clientModel.TrainingWallets.FirstOrDefault();

            if (cashWallet == null)
            {
                cashWallet ??= new CashWallet();
                clientModel.CashWallets ??= new List<CashWallet>();
                clientModel.CashWallets.Add(cashWallet);
            }

            if (trainingWallet == null)
            {
                trainingWallet ??= new TrainingWallet();
                clientModel.TrainingWallets ??= new List<TrainingWallet>();
                clientModel.TrainingWallets.Add(trainingWallet);                
            }
        }

        cashWalletOld = (CashWallet)cashWallet.Clone();
        trainingWalletOld = (TrainingWallet)trainingWallet.Clone();
    }

    private async Task HandleValidSubmit()
    {
        if (clientModel == null) return;

        if (!cashWalletOld.Equals(cashWallet))
        {
            await AddCashHistory();
        }

        if (!trainingWalletOld.Equals(trainingWallet))
        {
            await AddTrainingHistory();
        }

        if (IsNewClient)
        {
            await DbContext.Clients.AddAsync(clientModel);
        }
        else
        {
            DbContext.Clients.Update(clientModel);
        }

        await DbContext.SaveChangesAsync();
        NavigateToList();
    }

    private async Task AddTrainingHistory()
    {
        await DbContext.TrainingWalletHistory.AddAsync(new TrainingWalletHistory()
        {
            ClientId = ClientId,
            Skip = trainingWallet?.Skip ?? 0,
            Count = trainingWallet?.Count ?? 0,
            Subscription = trainingWallet.Subscription,
            Free = trainingWallet?.Free ?? 0,
            Comment = "Ручное изменение",
            Date = DateTime.Now,
            TrainingId = null
        });
    }

    private decimal GetDelta(decimal? var1, decimal? var2)
    {
        var varS1 = var1 ?? 0;
        var varS2 = var2 ?? 0;
        return varS1 == varS2 ? varS1 : varS1 - varS2;
    }

    private async Task AddCashHistory()
    {
        await DbContext.CashWalletHistory.AddAsync(new CashWalletHistory()
        {
            Cash = cashWallet?.Cash ?? 0,
            Comment = "Ручное изменение",
            Date = DateTime.Now,
            ClientId = ClientId,
            EventId = null
        });
    }

    private void Cancel()
    {
        NavigateToList();
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/clients");
    }
}