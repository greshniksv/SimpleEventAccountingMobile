@page "/clients"
@using Microsoft.EntityFrameworkCore
@using SimpleEventAccountingMobile.Components.Shared
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Database.Interfaces
@using SimpleEventAccountingMobile.Dtos
@inject IMainContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Клиенты</PageTitle>

<div class="page-header">
    <h1 class="page-title">Список клиентов</h1>
</div>


@if (clients == null)
{
    <p><em>Загрузка...</em></p>
}
else if (!clients.Any())
{
    <p><em>Клиенты не найдены. Добавьте первого!</em></p>
}
else
{
    <table class="table-main table table-striped">
        <thead>
        <tr>
            <th>Имя</th>
            <th class="action-column">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var client in clientsRel)
        {
            <tr>
                <td class="user-name-row"><b>@client.Name</b></td>
                <td>
                        
                    <button class="btn btn-sm btn-secondary button-icon" @onclick="() => HistoryClient(client.Id)">
                        <span class="bi bi-clipboard-check" aria-hidden="true"></span>
                    </button>

                    <button class="btn btn-sm btn-secondary button-icon" @onclick="() => EditClient(client.Id)">
                        <span class="bi bi-pencil" aria-hidden="true"></span>
                    </button>
                    <button class="btn btn-sm btn-danger button-icon" @onclick="() => PromptDelete(client)">
                        <span class="bi bi-trash" aria-hidden="true"></span>
                    </button>

                </td>
            </tr>

            <tr>
                <td colspan="4">
                    <table class="table-info">
                        <tr>
                            <td><b>Трн:</b> @client.TrainingCount!.Value.ToString("0")</td>
                            <td><b>Абон:</b> @(client.TrainingIsSubscription == true ? "Да" : "Нет")</td>
                            <td><b>Проп:</b> @client.TrainingSkip!.Value.ToString("0")</td>
                            <td><b>Сум:</b> @client.CashAmount!.Value.ToString("0")</td>
                        </tr>
                    </table>
                </td>
            </tr>
        }
        </tbody>
    </table>


    <div class="action-buttons">
        <button type="button" class="back-button" @onclick="NavigateToHome">
            <span class="back-icon">←</span>
            Назад
        </button>
        <button type="button" class="save-button" @onclick="AddNewClient">
            <span class="save-icon">+</span>
            Добавить клиента
        </button>
    </div>
}

@if (clientToDelete != null)
{
    <DeleteConfirmation Title="Подтвердите удаление"
                        OnConfirmationChanged="ConfirmDelete">
        <p>Вы уверены, что хотите удалить клиента <strong>@clientToDelete.Name</strong>? Это действие нельзя отменить.</p>
    </DeleteConfirmation>
}


@code {
    private List<Client>? clients;
    private List<ClientRelationsDto> clientsRel;
    private Client? clientToDelete;

    protected override async Task OnInitializedAsync()
    {
        // Загружаем только не удаленных клиентов
        clients = await DbContext.Clients
            .AsNoTracking()
            .Where(c => c.DeletedAt == null)
            .OrderBy(c => c.Name)
            .ToListAsync();

        clientsRel = await DbContext.Clients
            .AsNoTracking()
            .Where(c => c.DeletedAt == null)
            .Include(x=>x.TrainingWallets)
            .Include(x => x.CashWallets)
            .OrderBy(c => c.Name)
            .Select(x => new ClientRelationsDto
            {
                Id = x.Id,
                Birthday = x.Birthday, 
                Comment = x.Comment, 
                Name = x.Name, 
                TrainingIsSubscription = x.TrainingWallets!.FirstOrDefault()!.Subscription,
                CashAmount = x.CashWallets!.FirstOrDefault()!.Cash,
                TrainingCount = x.TrainingWallets!.FirstOrDefault()!.Count,
                TrainingSkip = x.TrainingWallets!.FirstOrDefault()!.Skip
            })
            .ToListAsync();

        clientsRel.ForEach(x=>
        {
            x.TrainingIsSubscription ??= false;
            x.CashAmount ??= 0;
            x.TrainingCount ??= 0;
            x.TrainingSkip ??= 0;
        });
    }

    private void HistoryClient(Guid clientId)
    {
        NavigationManager.NavigateTo($"/clients/history/{clientId}");
    }

    private void AddNewClient()
    {
        NavigationManager.NavigateTo("/clients/add");
    }

    private void EditClient(Guid clientId)
    {
        NavigationManager.NavigateTo($"/clients/edit/{clientId}");
    }

    private void PromptDelete(ClientRelationsDto client)
    {
        clientToDelete = clients.First(x=>x.Id == client.Id);
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task ConfirmDelete(bool confirmed)
    {
        if (confirmed && clientToDelete != null)
        {
            // Используем "мягкое" удаление (soft delete)
            var clientInDb = await DbContext.Clients.FindAsync(clientToDelete.Id);
            if(clientInDb != null)
            {
                clientInDb.DeletedAt = DateTime.Now;
                await DbContext.SaveChangesAsync();

                // Обновляем UI, удаляя из локального списка
                clients?.Remove(clientToDelete);
                clientsRel.RemoveAll(x => x.Id == clientToDelete.Id);
            }
        }

        // Сбрасываем клиента для удаления, чтобы скрыть диалог
        clientToDelete = null;
    }
}