@page "/clients"
@using Microsoft.EntityFrameworkCore
@using SimpleEventAccountingMobile.Components.Shared
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Database.Interfaces
@inject IMainContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Клиенты</PageTitle>

<h1>Список клиентов</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="AddNewClient">
        <span class="oi oi-plus" aria-hidden="true"></span> Добавить нового клиента
    </button>
</div>

@if (clients == null)
{
    <p><em>Загрузка...</em></p>
}
else if (!clients.Any())
{
    <p><em>Клиенты не найдены. Добавьте первого!</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Дата рождения</th>
                <th>Комментарий</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr>
                    <td>@client.Name</td>
                    <td>@client.Birthday.ToShortDateString()</td>
                    <td>@client.Comment</td>
                    <td>
                        <button class="btn btn-sm btn-secondary" @onclick="() => EditClient(client.Id)">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => PromptDelete(client)">
                             <span class="oi oi-trash" aria-hidden="true"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (clientToDelete != null)
{
    <DeleteConfirmation Title="Подтвердите удаление"
                        OnConfirmationChanged="ConfirmDelete">
        <p>Вы уверены, что хотите удалить клиента <strong>@clientToDelete.Name</strong>? Это действие нельзя отменить.</p>
    </DeleteConfirmation>
}


@code {
    private List<Client>? clients;
    private Client? clientToDelete;

    protected override async Task OnInitializedAsync()
    {
        // Загружаем только не удаленных клиентов
        clients = await DbContext.Clients
            .Where(c => !c.Deleted)
            .OrderBy(c => c.Name)
            .ToListAsync();
    }

    private void AddNewClient()
    {
        NavigationManager.NavigateTo("/clients/add");
    }

    private void EditClient(Guid clientId)
    {
        NavigationManager.NavigateTo($"/clients/edit/{clientId}");
    }

    private void PromptDelete(Client client)
    {
        clientToDelete = client;
    }

    private async Task ConfirmDelete(bool confirmed)
    {
        if (confirmed && clientToDelete != null)
        {
            // Используем "мягкое" удаление (soft delete)
            var clientInDb = await DbContext.Clients.FindAsync(clientToDelete.Id);
            if(clientInDb != null)
            {
                clientInDb.Deleted = true;
                await DbContext.SaveChangesAsync();

                // Обновляем UI, удаляя из локального списка
                clients?.Remove(clientToDelete);
            }
        }

        // Сбрасываем клиента для удаления, чтобы скрыть диалог
        clientToDelete = null;
    }
}