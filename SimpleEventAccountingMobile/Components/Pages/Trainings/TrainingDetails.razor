@page "/trainings/{TrainingId:guid}"
@inject ITrainingService TrainingService
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Services.Interfaces
@inject NavigationManager NavigationManager
@inject IErrorService ErrorService

<PageTitle>Детали тренировки</PageTitle>

<div class="training-details">
    @if (training == null)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p class="loading-text">Загрузка...</p>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="page-header">
            <h1 class="page-title">@training.Name</h1>
            <div class="training-date">
                <i class="date-icon">📅</i>
                @training.Date.ToString("dd.MM.yyyy HH:mm")
            </div>
        </div>

        <!-- Training Info Card -->
        <div class="info-card">
            <h2 class="section-title">Информация о тренировке</h2>
            <div class="info-item">
                <span class="info-label">Описание:</span>
                <span class="info-value">@training.Description</span>
            </div>
        </div>

        <!-- Participants Section -->
        <div class="participants-section">
            <h2 class="section-title">
                Участники тренировки
                @if (participants?.Any() == true)
                {
                    <span class="participants-count">(@participants.Count)</span>
                }
            </h2>
            
            @if (participants == null)
            {
                <div class="loading-container small">
                    <div class="spinner small"></div>
                    <p class="loading-text">Загрузка участников...</p>
                </div>
            }
            else if (!participants.Any())
            {
                <div class="empty-state">
                    <div class="empty-icon">👥</div>
                    <p>Пока нет участников</p>
                </div>
            }
            else
            {
                <div class="participants-grid">
                    @foreach (var participant in participants.Where(x => x is { IsParticipate: false, IsSubscriber: true }))
                    {
                        <div class="participant-card participant-absent">
                            <div class="participant-name">@participant.Client?.Name</div>
                        </div>
                    }

                    @foreach (var participant in participants.Where(x => x is { IsParticipate: true, IsSubscriber: true }))
                    {
                        <div class="participant-card participant-sub">
                            <div class="participant-name">@participant.Client?.Name</div>
                        </div>
                    }

                    @foreach (var participant in participants.Where(x => x is { IsParticipate: true, IsSubscriber: false }))
                    {
                        <div class="participant-card">
                            <div class="participant-name">@participant.Client?.Name</div>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Navigation -->
        <div class="action-buttons">
            <button type="button" class="back-button" @onclick="GoBack">
                <span class="back-icon">←</span>
                Назад
            </button>
            <button type="submit" class="delete-button" @onclick="GoDelete">
                <span class="create-icon">❌</span>
                Удалить
            </button>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid TrainingId { get; set; }

    private Training? training;
    private List<TrainingClient>? participants;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            training = await TrainingService.GetTrainingByIdAsync(TrainingId);
            if (training != null)
            {
                participants = training.TrainingClients?.ToList() ?? new List<TrainingClient>();
            }
        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex, "Ошибка загрузки страницы");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/trainings");
    }

    private void GoDelete()
    {
        NavigationManager.NavigateTo($"/delete-training/{TrainingId}");
    }
}