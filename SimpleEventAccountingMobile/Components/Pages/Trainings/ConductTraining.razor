@page "/conduct-training"
@inject ITrainingService TrainingService
@using System.ComponentModel.DataAnnotations
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Services.Interfaces
@inject IErrorService ErrorService

<PageTitle>Провести тренировку</PageTitle>

<div class="conduct-training-page">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p class="loading-text">Загрузка клиентов...</p>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="page-header">
            <h1 class="page-title">Провести тренировку</h1>
        </div>

        <EditForm Model="newTraining" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <!-- Training Info Card -->
            <div class="info-card">
                <h2 class="section-title">Информация о тренировке</h2>
                
                <div class="form-group">
                    <label class="form-label">Название тренировки</label>
                    <InputText @bind-Value="newTraining.Name" class="form-control" />
                    <ValidationMessage For="@(() => newTraining.Name)" />
                </div>

                <div class="form-group">
                    <label class="form-label">Описание тренировки</label>
                    <InputTextArea @bind-Value="newTraining.Description" class="form-control" />
                    <ValidationMessage For="@(() => newTraining.Description)" />
                </div>

                <div class="form-group">
                    <label class="form-label">Дата проведения</label>
                    <InputDate @bind-Value="newTraining.Date" Format="dd.MM.yyyy" class="form-control" />
                    <ValidationMessage For="@(() => newTraining.Date)" />
                </div>
            </div>

            <!-- Subscribed Clients Section -->
            <div class="info-card">
                <h2 class="section-title">
                    Клиенты с подпиской
                    @if (selectableSubscribedClients?.Any() == true)
                    {
                        <span class="participants-count">(@selectableSubscribedClients.Count)</span>
                    }
                </h2>
                
                @if (!selectableSubscribedClients.Any())
                {
                    <div class="empty-state">
                        <div class="empty-icon">👥</div>
                        <p>Нет клиентов с подпиской</p>
                    </div>
                }
                else
                {
                    <div class="clients-grid">
                        @foreach (var selectableClient in selectableSubscribedClients)
                        {
                            <div class="client-card @(selectableClient.IsSelected ? "selected" : "")">
                                <label class="client-checkbox">
                                    <InputCheckbox class="chk-box" @bind-Value="selectableClient.IsSelected" />
                                    @* <span class="checkmark"></span> *@
                                </label>
                                <div class="client-name">@selectableClient.Client.Name</div>
                                <button type="button" class="remove-button" @onclick="() => RemoveAddedSubClient(selectableClient)">
                                    <span class="remove-icon">✕</span>
                                </button>
                            </div>
                        }
                    </div>
                }
                
                <button type="button" class="add-button" @onclick="ShowAddClientModalSub">
                    <span class="add-icon">+</span>
                    Добавить клиента c подписокй
                </button>
            </div>

            <!-- Additional Clients Section -->
            <div class="info-card">
                <h2 class="section-title">
                    Дополнительные клиенты
                    @if (addedClients?.Any() == true)
                    {
                        <span class="participants-count">(@addedClients.Count)</span>
                    }
                </h2>
                
                @if (!addedClients.Any())
                {
                    <div class="empty-state">
                        <div class="empty-icon">➕</div>
                        <p>Добавьте клиентов без подписки</p>
                    </div>
                }
                else
                {
                    <div class="clients-grid">
                        @foreach (var client in addedClients)
                        {
                            <div class="client-card">
                                <div class="client-name">@client.Name</div>
                                <button type="button" class="remove-button" @onclick="() => RemoveAddedClient(client)">
                                    <span class="remove-icon">✕</span>
                                </button>
                            </div>
                        }
                    </div>
                }
                
                <button type="button" class="add-button" @onclick="ShowAddClientModal">
                    <span class="add-icon">+</span>
                    Добавить клиента
                </button>
            </div>

            <!-- Submit Button -->
            <div class="action-buttons">
                <button type="button" class="back-button" @onclick="GoBack">
                    <span class="back-icon">←</span>
                    Назад
                </button>
                <button type="submit" class="submit-button">
                    <span class="submit-icon">✓</span>
                    Провести тренировку
                </button>
            </div>

        </EditForm>
    }
</div>

<AddClientPopup IsVisible="@isAddClientModalSubVisible"
                IsVisibleChanged="OnAddClientModalSubChanged"
                AvailableClients="availableClientsForAdditionSub"
                OnClientSelected="AddClientToAddedClientsSub" />

<AddClientPopup IsVisible="@isAddClientModalVisible"
                IsVisibleChanged="OnAddClientModalChanged"
                AvailableClients="availableClientsForAddition"
                OnClientSelected="AddClientToAddedClients" />

@code {
    private NewTrainingModel newTraining = new NewTrainingModel();
    private List<Client> clients = new();
    private List<Client> subscribedClients = new();
    private List<Client> addedClients = new();
    private List<SelectableClient> selectableSubscribedClients = new();
    private bool isLoading = true;
    private string? errorMessage;

    private bool isAddClientModalVisible = false;
    private List<Client> availableClientsForAddition = new();

    private bool isAddClientModalSubVisible = false;
    private List<Client> availableClientsForAdditionSub = new();

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clients = await TrainingService.GetClientsAsync();
            subscribedClients = await TrainingService.GetSubscribedClientsAsync();

            selectableSubscribedClients = subscribedClients.Select(c => new SelectableClient
            {
                Client = c,
                IsSelected = false
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке клиентов: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/trainings");
    }

    private void ShowAddClientModal()
    {
        try
        {
            isAddClientModalVisible = true;
            availableClientsForAddition = clients
                .Where(c => 
                    !subscribedClients.Any(sc => sc.Id == c.Id) && 
                    !addedClients.Any(ac => ac.Id == c.Id))
                .ToList();
        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex, "Ошибка загрузки клиентов");
        }
    }

    private async Task ShowAddClientModalSub()
    {
        try
        {
            isAddClientModalSubVisible = true;
            availableClientsForAdditionSub = 
                (await TrainingService.GetSubscribedClientsAsync())
                .Where(x => !selectableSubscribedClients.Any(c=> c.Client.Id == x.Id)).ToList();
        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex, "Ошибка загрузки клиентов в абонементом");
        }
    }

    private void OnAddClientModalChanged(bool visible)
    {
        isAddClientModalVisible = visible;
    }

    private void OnAddClientModalSubChanged(bool visible)
    {
        isAddClientModalSubVisible = visible;
    }

    private async Task AddClientToAddedClientsSub(Client client)
    {
        if (!selectableSubscribedClients.Any(x => x.Client.Id == client.Id))
        {
            selectableSubscribedClients.Add(new SelectableClient(){ Client = client, IsSelected = false });
        }

        availableClientsForAdditionSub = availableClientsForAdditionSub.Where(c => c.Id != client.Id).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddClientToAddedClients(Client client)
    {
        if (!addedClients.Any(c => c.Id == client.Id))
        {
            addedClients.Add(client);
        }

        availableClientsForAddition = availableClientsForAddition.Where(c => c.Id != client.Id).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveAddedClient(Client client)
    {
        addedClients.Remove(client);
        if (!subscribedClients.Any(sc => sc.Id == client.Id))
        {
            availableClientsForAddition.Add(client);
        }
    }

    private void RemoveAddedSubClient(SelectableClient client)
    {
        selectableSubscribedClients.Remove(client);
        availableClientsForAdditionSub.Add(client.Client);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var selectedSubscribedClientIds = selectableSubscribedClients
                .Where(c => c.IsSelected)
                .Select(c => c.Client.Id)
                .ToList();

            var addedClientIds = addedClients.Select(c => c.Id).ToList();
            var finalClientIds = selectedSubscribedClientIds.Union(addedClientIds).Distinct().ToList();
            var absentClients = selectableSubscribedClients
                .Where(c => !c.IsSelected)
                .Select(c => c.Client.Id)
                .ToList();

            var training = new Training
            {
                Name = newTraining.Name,
                Description = newTraining.Description,
                Date = newTraining.Date,
                DeletedAt = null
            };

            await TrainingService.ConductTrainingAsync(training, finalClientIds, absentClients);
            NavigationManager.NavigateTo("/trainings");
        }
        catch (Exception ex)
        {
            ErrorService.ShowError(ex, "Ошибка при проведении тренировки");
            errorMessage = $"Ошибка при проведении тренировки: {ex.Message}";
        }
    }

    public class NewTrainingModel
    {
        [Required(ErrorMessage = "Название тренировки обязательно.")]
        public string? Name { get; set; }

        public string? Description { get; set; }

        [Required(ErrorMessage = "Дата проведения обязательна.")]
        public DateTime Date { get; set; } = DateTime.Now;
    }

    public class SelectableClient
    {
        public Client Client { get; set; }
        public bool IsSelected { get; set; }
    }
}