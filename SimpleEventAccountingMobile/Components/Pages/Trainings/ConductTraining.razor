@page "/conduct-training"
@inject ITrainingService TrainingService
@using System.ComponentModel.DataAnnotations
@using SimpleEventAccountingMobile.Database.DbModels
@using SimpleEventAccountingMobile.Services.Interfaces
@using SimpleEventAccountingMobile.Components.Shared

<PageTitle>Провести тренировку</PageTitle>

<h3>Провести тренировку</h3>

<hr />

@if (isLoading)
{
    <p><em>Загрузка клиентов...</em></p>
}
else
{
    <EditForm Model="newTraining" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <div class="mb-3">
            <label class="form-label">Название тренировки</label>
            <InputText @bind-Value="newTraining.Name" class="form-control" />
            <ValidationMessage For="@(() => newTraining.Name)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Описание тренировки</label>
            <InputTextArea @bind-Value="newTraining.Description" class="form-control" />
            <ValidationMessage For="@(() => newTraining.Description)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Дата проведения</label>
            <InputDate @bind-Value="newTraining.Date" class="form-control" />
            <ValidationMessage For="@(() => newTraining.Date)" />
        </div>

        <div class="mb-3">
            <h5>Клиенты с подпиской</h5>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>*</th>
                        <th>Имя</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var selectableClient in selectableSubscribedClients)
                    {
                        <tr>
                            <td>
                                <InputCheckbox @bind-Value="selectableClient.IsSelected" />
                            </td>
                            <td>@selectableClient.Client.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mb-3">
            <h5>Дополнительные клиенты</h5>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Имя</th>
                        <th>Действие</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var client in addedClients)
                    {
                        <tr>
                            <td>@client.Name</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveAddedClient(client)">Удалить</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-secondary" @onclick="ShowAddClientModal">Добавить Клиента</button>
        </div>

        <button type="submit" class="btn btn-primary">Провести тренировку</button>
    </EditForm>
}

<AddClientPopup IsVisible="@isAddClientModalVisible"
                IsVisibleChanged="OnAddClientModalChanged"
                AvailableClients="availableClientsForAddition"
                OnClientSelected="AddClientToAddedClients" />

@code {
    private NewTrainingModel newTraining = new NewTrainingModel();
    private List<Client> clients = new();
    private List<Client> subscribedClients = new();
    private List<Client> addedClients = new();
    private List<SelectableClient> selectableSubscribedClients = new();
    private bool isLoading = true;
    private string? errorMessage;

    private bool isAddClientModalVisible = false;
    private List<Client> availableClientsForAddition = new();

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clients = await TrainingService.GetClientsAsync();
            subscribedClients = await TrainingService.GetSubscribedClientsAsync();

            // Инициализируем selectableSubscribedClients
            selectableSubscribedClients = subscribedClients.Select(c => new SelectableClient
            {
                Client = c,
                IsSelected = false
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке клиентов: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddClientModal()
    {
        isAddClientModalVisible = true;
        // Определяем доступных для добавления клиентов (не подписанные и не добавленные)
        availableClientsForAddition = clients
            .Where(c => !subscribedClients.Any(sc => sc.Id == c.Id) && !addedClients.Any(ac => ac.Id == c.Id))
            .ToList();
    }

    private void OnAddClientModalChanged(bool visible)
    {
        isAddClientModalVisible = visible;
    }

    private async Task AddClientToAddedClients(Client client)
    {
        if (!addedClients.Any(c => c.Id == client.Id))
        {
            addedClients.Add(client);
        }

        // Дополнительно, вы можете обновить список доступных клиентов
        availableClientsForAddition = availableClientsForAddition.Where(c => c.Id != client.Id).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private void RemoveAddedClient(Client client)
    {
        addedClients.Remove(client);
        // Возвращаем клиента в список доступных для добавления
        if (!subscribedClients.Any(sc => sc.Id == client.Id))
        {
            availableClientsForAddition.Add(client);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Собираем выбранных подписанных клиентов
            var selectedSubscribedClientIds = selectableSubscribedClients
                .Where(c => c.IsSelected)
                .Select(c => c.Client.Id)
                .ToList();

            // Собираем добавленных клиентов
            var addedClientIds = addedClients.Select(c => c.Id).ToList();

            // Объединяем списки
            var finalClientIds = selectedSubscribedClientIds.Union(addedClientIds).Distinct().ToList();

            var training = new Training
            {
                Name = newTraining.Name,
                Description = newTraining.Description,
                Date = newTraining.Date,
                Deleted = false
            };

            await TrainingService.ConductTrainingAsync(training, finalClientIds);

            // Перенаправление
            NavigationManager.NavigateTo("/trainings");
        }
        catch (Exception ex)
        {
            // Логируем и показываем сообщение об ошибке
            errorMessage = $"Ошибка при проведении тренировки: {ex.Message}";
        }
    }

    // Модель для формы
    public class NewTrainingModel
    {
        [Required(ErrorMessage = "Название тренировки обязательно.")]
        public string? Name { get; set; }

        public string? Description { get; set; }

        [Required(ErrorMessage = "Дата проведения обязательна.")]
        public DateTime Date { get; set; } = DateTime.Now;
    }

    // Вспомогательная модель
    public class SelectableClient
    {
        public Client Client { get; set; }
        public bool IsSelected { get; set; }
    }
}